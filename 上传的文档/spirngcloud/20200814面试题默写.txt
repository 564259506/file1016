三 微服务技术栈：
1.服务发现和注册： Erueka,zookeeper
2.服务负载均衡： ribbon  Nginx  LVS
3.服务接口和调用：Feign (封装了。。)
4. 服务熔断： Hystrix
5.服务开发
6.网关，Zuul gateway
7.消息队列：kafka mq..
8.服务配置中心管理：springcloudconfig
9.事件消息总线

一，什么是springcloud
 1.是一款spring家族的微服务框架。
2.提供了全套的分布式系统解决方案
3.为开发者提供了快速构建分布式开发系统的工具
4.能快速的启动服务或构建应用

 一 .1 springcloud 和dubbo的区别
从公司（和解决方案）方面看： s-->Apache旗下spring体系中微服务解决方案
                                     d-->阿里系的分布式服务治理框架
从技术维度看： s目前就有21种，以后可能会更多， 而d，目前只实现了服务治理
从服务注册中心看： d-->zookeeper,  s-->eureka
从网关方面看： d--》依靠第三方， s--》zuul路由网关
从服务的调用方式看： d-->RPC远程调用， S---rest API

一.2 使用Spring Cloud有什么优势？

四 服务的发现和注册？？？
  运用springcloud 的eureka 实现服务发现和注册。将所有的服务都在Eureka上注册，并通过调用Eureka服务器完成查找，因此不再需要配置多个复杂的属性文件。

四.1 Eureka的工作流程
  1. 创建并启动好Eureka service 服务，等待服务注册
  2. 有Eureka Client （客户端）来指定的注册中心注册
  3. 客户端发送心跳，证明活着，证明客户端正常 ，每30秒发送一次
  4. 注销失效节点，Eureka service 会将90秒都没发送心跳的客户端（Eureka Client）清除掉
  5. 进入自我保护机制： 当单位时间内有大量客户端Eureka Client没送上心跳，Eureka service会怀疑是否是网络问题，为了避免误删，进入自我保护机制。
 6. 退出自我保护机制，当能正常收到心跳（能收到的心跳总数>=85%）时候退出

五。负载均衡

五.1   什么是负载均衡？
       将请求平摊到多个服务器中，达到系统的平均分配
常见的负载均衡： springcloud_ribbon,  Nginx, LVS  ,硬件层面的F5

五。2 负载均衡机制
     轮询机制（123123123） /  权重机制

五。3   什么是 Ribbon
   是一款基于HTTP和TCP的客户端负载均衡工具

五。4   feign 实现负载均衡
   feign: 服务接口调用，采用的是基于接口和注解（@FeignClient），步骤繁琐
   feign整合了ribbon,具有负载均衡的能力
   feign整合了Hystrix ，具有服务熔断的能力

五.5 .Ribbon和Feign的区别？
   1.调用方式不同： ribbon 需要模拟http请求用restTemplate 发送给其他服务
                              feign ：只需创建接口，然后在上面添加@FeignClient 注解即可
   2. 启动类注解不同： R: @RibbonClient   F: EnableFeignClient
   3.  服务指定位置不同 R： 在@RibbonClient 注解上声明   ，F：在自定义的接口上的@FeignClient注解中声明

六 服务雪崩

6.1. 什么是服务雪崩
当服务突然有大量的请求过来，一个服务瘫痪之后，后面服务请求积压。这就造成了服务雪崩   

6.2 服务雪崩原因
1. 服务提供者不可用 (硬件故障,程序bug 缓存击穿,用户大量请求)
2. 重试加大流量(用户重试,代码逻辑重试)
3. 服务调用者不可用(同步等待造成的资源耗尽)
最终的结果就是一个服务不可用,导致一系列的服务不可用,这种后果无法预料
6.3解决服务雪崩的方法
1.服务熔断（Hystrix）注解是@HystrixCommand:
     是什么？熔断机制是应对雪崩效应的一种微服务链路保护机制
　　　有什么用？当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回”错误”的响应信息
　　　1.1Hystrix是一个用于分布式系统的延迟和容错的开源库。在分布式系统里，许多依赖不可避免的调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整个服务失败，避免级联故障，以提高分布式系统的弹性。
      1.2  “断路器”本身是一种开关装置，当某个服务单元发生故障监控(类似熔断保险丝)，向调用方法返回一个符合预期的、可处理的备选响应(FallBack)，而不是长时间的等待或者抛出调用方法无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延。乃至雪崩。
2.降级: 超时降级资源不足时(线程或信号量)降级,降级后可以配合降级接口返回托底数据,实现一个fallback方法,当请求出现异常之后,调用这个方法
3. 隔离(线程池隔离和信号量隔离): 限制调用分布式服务的资源使用,某一个调用的服务出现问题不会影响其他服务调用

4.缓存:提供请求缓存
5.提供请求合并

















